apply plugin: 'com.android.application'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion project.ext.targetSdkVersion
        manifestPlaceholders = [
                applicationLabelAddition :  ""
        ]
    }

    lintOptions {
        abortOnError false
    }

    def isReleaseAble = System.getenv("SENSORBERG_KEYSTORE_PATH") != null

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
    }

    signingConfigs {
        if (isReleaseAble) {
            release {
                storeFile file(System.getenv("SENSORBERG_KEYSTORE_PATH"))
                storePassword System.getenv("SENSORBERG_KEYSTORE_PASSWORD")
                keyAlias System.getenv("SENSORBERG_KEYSTORE_KEY_ALIAS")
                keyPassword System.getenv("SENSORBERG_KEYSTORE_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "ø"
            minifyEnabled false
            manifestPlaceholders = [
                    applicationLabelAddition :  " Debug ø"
            ]
        }

        release {
            applicationIdSuffix null
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules-app.pro'
            if (isReleaseAble) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile project(':android-sdk')
    compile ('com.android.support:multidex:1.0.1')
    compile 'com.google.android.gms:play-services-ads:10.0.1'
    compile 'com.android.support:support-v4:26.0.1'
}
